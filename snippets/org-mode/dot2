# -*- mode: snippet -*-
# name: dot with example
# key: dot
# --
#+name: example-node-table
| *node* | *label* | *shape*   | *fillcolor* |
|--------+---------+-----------+-------------|
| OP     | OP      | rectangle | aliceblue   |
| Q1     | Q1      | rectangle |             |
| M1     | M1      | rectangle |             |
| I1     | I1      | rectangle | yellowgreen |

#+name: example-graph
| from | to | label |
|------+----+-------|
| OP   | Q1 |       |
| Q1   | M1 |       |
| M1   | I1 |       |

#+name: example-graph-from-tables
#+HEADER: :var nodes=example-node-table graph=example-graph
#+BEGIN_SRC emacs-lisp :exports none
    (concat
       "digraph {\n"
       "rankdir=LR;\n" ;; remove comment characters '//' for horizontal layout; add for vertical layout
       (mapconcat
        (lambda (x)
          (format "%s [label=\"%s\" shape=%s style=\"filled\" fillcolor=\"%s\"]"
                          (car x)
                          (nth 1 x)
                          (if (string= "" (nth 2 x)) "box" (nth 2 x))
                          (if (string= "" (nth 3 x)) "none" (nth 3 x))
                          )) nodes "\n")
       "\n"
       (mapconcat
        (lambda (x)
          (format "%s -> %s [taillabel=\"%s\"]"
                          (car x) (nth 1 x) (nth 2 x))) graph "\n")
       "}\n")
#+END_SRC

#+BEGIN_SRC dot :file images/1-dot.png :var input=example-graph-from-tables :exports results
 $input
#+END_SRC

#+results:
[[file:images/1-dot.png]]
